resource_types:
- name: vault
  type: docker-image
  source:
    repository: oratos/vault-resource
    tag: latest

resources:
- name: metric-proxy-master-version
  type: git
  source:
    branch: master
    private_key: ((oratos-bot-private-key))
    uri: git@github.com:cloudfoundry/metric-proxy.git
    clean_tags: true
    paths:
    - version

- name: metric-proxy-version
  type: semver
  source:
    branch: master
    driver: git
    file: version
    private_key: ((oratos-bot-private-key))
    uri: git@github.com:cloudfoundry/metric-proxy.git

- name: cf-for-k8s
  type: git
  source:
    branch: main
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((oratos-bot-private-key))

- name: metric-proxy
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/metric-proxy
    private_key: ((oratos-bot-private-key))

- name: metric-proxy-docker
  type: docker-image
  source:
    username: ((oratos-docker.username))
    password: ((oratos-docker.password))
    repository: cloudfoundry/metric-proxy
    tag: pipeline-test

- name: metric-proxy-image
  type: registry-image
  source:
    repository: cloudfoundry/metric-proxy
    username: ((oratos-docker.username))
    password: ((oratos-docker.password))

- name: metric-proxy-github-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: metric-proxy
    access_token: ((loggregator-bot-access-token))
    drafts: true

- name: denver-metric-proxy-pipeline-vars
  type: vault
  source:
    url: https://vault.oratos.ci.cf-app.com
    role_id: ((vault.role_id))
    secret_id: ((vault.secret_id))
    path: /secret/envs/cf4k8s/denver-metric-proxy-pipeline-vars

jobs:
  - name: run-tests-on-cf-for-k8s-pr
    public: true
    serial: true
    plan:
    - in_parallel:
      - get: cf-for-k8s
      - get: metric-proxy
        trigger: true
      - get: metric-proxy-docker
      - get: denver-metric-proxy-pipeline-vars
    - in_parallel:
      - task: delete-cf
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
          run:
            path: /bin/bash
            args:
            - -ecx
            - |
              export KUBECONFIG=kube-config.yml
              gcloud auth activate-service-account --key-file=<(echo '((ci_k8s_gcp_service_account_json))') --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
              gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1
              kapp delete -a cf --yes
    # Puts do an implicit check so this builds the image and immediately makes
    # it available to the next task and dockerhub
      - put: metric-proxy-docker
        params:
          additional_tags: metric-proxy/ci/dockertags
          dockerfile: metric-proxy/Dockerfile
          build: metric-proxy
    - task: update-values-and-vendir-metrics
      file: metric-proxy/ci/tasks/update-values-and-vendir-metrics.yml
    - task: install-cf
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
        inputs:
        - name: cf-for-k8s-with-metrics
        - name: metric-proxy-docker
        - name: metric-proxy
        outputs:
        - name: env-metadata
        - name: vars
        params:
          DNS_DOMAIN: ((ci_k8s_domain))
          DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
        run:
          path: /bin/bash
          args:
          - -ecx
          - |
            echo '((ci_k8s_gcp_service_account_json))' > sa.json
            export KUBECONFIG=kube-config.yml
            gcloud auth activate-service-account --key-file=sa.json --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
            gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1
            cf-for-k8s-with-metrics/hack/confirm-network-policy.sh '((ci_k8s_gke_cluster_name))' '((ci_k8s_gcp_project_zone))'
            echo "Generating install values..."
            cf-for-k8s-with-metrics/hack/generate-values.sh -d "${DNS_DOMAIN}" -g sa.json > vars/cf-install-values.yml
            echo "Installing CF..."
            ytt -f cf-for-k8s-with-metrics/config -f vars/cf-install-values.yml > /tmp/cf-for-k8s-rendered.yml
            kapp deploy -a cf -f /tmp/cf-for-k8s-rendered.yml -y
            bosh interpolate --path /cf_admin_password vars/cf-install-values.yml > env-metadata/cf-admin-password.txt
            echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
            echo "Configuring DNS..."
            metric-proxy/hack/update_dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"
    - put: denver-metric-proxy-pipeline-vars
      params:
        data: vars
    - task: run-smoke-test
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
        inputs:
          - name: cf-for-k8s-with-metrics
          - name: env-metadata
        run:
          path: /bin/sh
          args:
          - -ec
          - |
            DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
            export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
            export SMOKE_TEST_APPS_DOMAIN=apps."${DNS_DOMAIN}"
            export SMOKE_TEST_USERNAME=admin
            export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
            export SMOKE_TEST_SKIP_SSL=true
            cf-for-k8s-with-metrics/hack/run-smoke-tests.sh
  - name: metric-proxy-cut-patch
    plan:
    - put: metric-proxy-version
      params: {bump: patch}
  - name: metric-proxy-cut-minor
    plan:
    - put: metric-proxy-version
      params: {bump: minor}
  - name: metric-proxy-cut-major
    plan:
    - put: metric-proxy-version
      params: {bump: major}
  - name: create-release
    plan:
    - in_parallel:
      - get: metric-proxy-master-version
      - get: metric-proxy
        passed: ["run-tests-on-cf-for-k8s-pr"]
    - task: build-image
      privileged: true
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: vito/oci-build-task
        inputs:
        - name: metric-proxy
          path: .
        outputs:
        - name: image
        run:
          path: build
    - task: add-osl-labels
      input_mapping:
        source-repository: metric-proxy
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: pivotalcfreleng/tas-for-k8s-ci
        inputs:
        - name: image
        - name: source-repository
        outputs:
        - name: labeled-image
        run:
          path: bash
          args:
          - -euc
          - deplab --image-tar image/image.tar --git source-repository --output-tar "labeled-image/image.tar"
    - put: metric-proxy-image
      params:
        image: labeled-image/image.tar
        additional_tags: metric-proxy-master-version/version
    - task: prepare-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-for-k8s-ci}
        inputs:
          - name: metric-proxy
          - name: labeled-image
          - name: metric-proxy-image
          - name: metric-proxy-master-version
        outputs:
          - name: metric-proxy-release
        run:
          path: /bin/bash
          args:
          - -ce
          - |
            new_metric_proxy_image_digest=$(cat metric-proxy-image/digest)
            version=$(cat metric-proxy-master-version/version)

            echo $version > metric-proxy-release/name

            pushd metric-proxy
              git rev-parse HEAD > ../metric-proxy-release/commitish

              source metric-proxy/hack/helpers.sh
              updateConfigValues "metric-proxy@${new_metric_proxy_image_digest}" "metric_proxy"
              sed -i "s|version:.*|version: $version|" config/values.yml
            popd

            mkdir metric-proxy-release/globs
            cp metric-proxy/config/* metric-proxy-release/globs/

            cat << EOF > metric-proxy-release/body
            ### Changelog

            **Image SHA**
            $new_metric_proxy_image_digest

            **Image Tag**
            $version

            EOF
    - put: metric-proxy-github-release
      params:
        name: metric-proxy-release/name
        tag: metric-proxy-release/name
        globs:
        - metric-proxy-release/globs/*
        commitish: metric-proxy-release/commitish
        body: metric-proxy-release/body

