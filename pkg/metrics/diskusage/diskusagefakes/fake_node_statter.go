// Code generated by counterfeiter. DO NOT EDIT.
package diskusagefakes

import (
	"sync"

	"code.cloudfoundry.org/metric-proxy/pkg/metrics/diskusage"
)

type FakeNodeStatter struct {
	SummaryStub        func(string) (diskusage.NodeDiskUsage, error)
	summaryMutex       sync.RWMutex
	summaryArgsForCall []struct {
		arg1 string
	}
	summaryReturns struct {
		result1 diskusage.NodeDiskUsage
		result2 error
	}
	summaryReturnsOnCall map[int]struct {
		result1 diskusage.NodeDiskUsage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeStatter) Summary(arg1 string) (diskusage.NodeDiskUsage, error) {
	fake.summaryMutex.Lock()
	ret, specificReturn := fake.summaryReturnsOnCall[len(fake.summaryArgsForCall)]
	fake.summaryArgsForCall = append(fake.summaryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SummaryStub
	fakeReturns := fake.summaryReturns
	fake.recordInvocation("Summary", []interface{}{arg1})
	fake.summaryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeStatter) SummaryCallCount() int {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	return len(fake.summaryArgsForCall)
}

func (fake *FakeNodeStatter) SummaryCalls(stub func(string) (diskusage.NodeDiskUsage, error)) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = stub
}

func (fake *FakeNodeStatter) SummaryArgsForCall(i int) string {
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	argsForCall := fake.summaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeStatter) SummaryReturns(result1 diskusage.NodeDiskUsage, result2 error) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = nil
	fake.summaryReturns = struct {
		result1 diskusage.NodeDiskUsage
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeStatter) SummaryReturnsOnCall(i int, result1 diskusage.NodeDiskUsage, result2 error) {
	fake.summaryMutex.Lock()
	defer fake.summaryMutex.Unlock()
	fake.SummaryStub = nil
	if fake.summaryReturnsOnCall == nil {
		fake.summaryReturnsOnCall = make(map[int]struct {
			result1 diskusage.NodeDiskUsage
			result2 error
		})
	}
	fake.summaryReturnsOnCall[i] = struct {
		result1 diskusage.NodeDiskUsage
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeStatter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.summaryMutex.RLock()
	defer fake.summaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeStatter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ diskusage.NodeStatter = new(FakeNodeStatter)
