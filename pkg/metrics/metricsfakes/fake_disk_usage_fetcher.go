// Code generated by counterfeiter. DO NOT EDIT.
package metricsfakes

import (
	"sync"

	"code.cloudfoundry.org/metric-proxy/pkg/metrics"
)

type FakeDiskUsageFetcher struct {
	DiskUsageStub        func(string) (int64, error)
	diskUsageMutex       sync.RWMutex
	diskUsageArgsForCall []struct {
		arg1 string
	}
	diskUsageReturns struct {
		result1 int64
		result2 error
	}
	diskUsageReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskUsageFetcher) DiskUsage(arg1 string) (int64, error) {
	fake.diskUsageMutex.Lock()
	ret, specificReturn := fake.diskUsageReturnsOnCall[len(fake.diskUsageArgsForCall)]
	fake.diskUsageArgsForCall = append(fake.diskUsageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DiskUsageStub
	fakeReturns := fake.diskUsageReturns
	fake.recordInvocation("DiskUsage", []interface{}{arg1})
	fake.diskUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDiskUsageFetcher) DiskUsageCallCount() int {
	fake.diskUsageMutex.RLock()
	defer fake.diskUsageMutex.RUnlock()
	return len(fake.diskUsageArgsForCall)
}

func (fake *FakeDiskUsageFetcher) DiskUsageCalls(stub func(string) (int64, error)) {
	fake.diskUsageMutex.Lock()
	defer fake.diskUsageMutex.Unlock()
	fake.DiskUsageStub = stub
}

func (fake *FakeDiskUsageFetcher) DiskUsageArgsForCall(i int) string {
	fake.diskUsageMutex.RLock()
	defer fake.diskUsageMutex.RUnlock()
	argsForCall := fake.diskUsageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDiskUsageFetcher) DiskUsageReturns(result1 int64, result2 error) {
	fake.diskUsageMutex.Lock()
	defer fake.diskUsageMutex.Unlock()
	fake.DiskUsageStub = nil
	fake.diskUsageReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskUsageFetcher) DiskUsageReturnsOnCall(i int, result1 int64, result2 error) {
	fake.diskUsageMutex.Lock()
	defer fake.diskUsageMutex.Unlock()
	fake.DiskUsageStub = nil
	if fake.diskUsageReturnsOnCall == nil {
		fake.diskUsageReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.diskUsageReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskUsageFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.diskUsageMutex.RLock()
	defer fake.diskUsageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDiskUsageFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ metrics.DiskUsageFetcher = new(FakeDiskUsageFetcher)
